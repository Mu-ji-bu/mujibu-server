components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        teamId:
          type: string
        avatar:
          type: string
        name:
          type: string
        nickname:
          type: string
        birthDate:
          type: string
          format: date-time
        gender:
          type: string
          enum: ['male', 'female', 'other']
        email:
          type: string
          format: email
        phone:
          type: string
        subscribeNewsletter:
          type: boolean
        category:
          type: string
        contactName:
          type: string
        commentName:
          type: string
        contactPhone:
          type: string
        countryCode:
          type: string
        postalCode:
          type: string
        city:
          type: string
        district:
          type: string
        address:
          type: string
        role:
          type: string
          enum: ['user', 'admin']
        isEmailVerified:
          type: boolean
      required:
        - name
        - email
        - role
      example:
        id: 6468849af7727e67acfcba4d
        email: 000testonly@gmail.com
        name: 專用測試
        role: user
        isEmailVerified: false
        subscribeNewsletter: false
        notifications: []
        collects: []

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
